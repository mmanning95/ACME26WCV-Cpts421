// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")

}
generator client {
  provider = "prisma-client-js"
}
model Account { 
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

//table for dynamic storage of creator code
model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String   @unique
  //emailVerified DateTime? @map("email_verified")
  passwordHash  String //Hashed password for security
  accounts      Account[]
  role          String      @default("MEMBER")
  member        Member?
  admin         Admin?
  events        Event[] // Relation: One user can have many events
  questions     Question[]
  comments      Comment[]
}
//one-to-one relationship
//? means optional
model Member {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  
  // Any additional fields specific to members
}

model Admin {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  
  // Admin-specific fields
  officeNumber      String?
  officeHours       String?
  officeLocation    String?
  creatorCode       String @default("wc_create_admin")
}

model Event {
  id                String @id @default(cuid())
  createdById            String
  createdBy         User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  website      String?
  title        String
  type         String?
  startDate    DateTime?
  endDate      DateTime? //optional since one day events do not need it
  description  String?
  startTime    String?
  endTime      String?
  flyer        String?  // Flyer file (URL or storage path)
  status       String   @default("PENDING") // Status of event: APPROVED, DENIED, PENDING
  interested   Int     @default(0) // New field for storing interest count
  comments     Comment[]
}

model Question {
  id          String   @id @default(cuid())
  text        String
  username    String   // Required name for the user who posted the question
  userEmail   String   // Required email for all questions, even for private
  isPrivate   Boolean  @default(false)
  datePosted  DateTime @default(now())
  userId      String?  // If posted by logged-in user
  createdBy   User?    @relation(fields: [userId], references: [id])
}

model Comment {
  id          String   @id @default(cuid())
  content     String   // The comment text
  createdAt   DateTime @default(now()) // When the comment was created
  updatedAt   DateTime @updatedAt // When the comment was last updated
  eventId     String   // Foreign key to associate with an event
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId      String   // Foreign key to associate with the user who commented
  createdBy   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Self-referencing relationship for replies
  parentId    String?  // Foreign key to link a comment
  parent      Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     Comment[] @relation("CommentReplies")
}

// Links for resources page
model Link {
  id          String     @id @default(cuid())
  title       String
  description String
  url         String
  location    String     // "Moscow" or "Pullman"
  category    String?     // Category as a plain string (e.g., "Volunteer", "Financial Assistance")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

//dont forget npx prisma migrate dev --name ...