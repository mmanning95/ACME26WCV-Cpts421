// learn more about this file in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account { //https://authjs.dev/getting-started/adapters/prisma
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  passwordHash  String
  accounts      Account[]
  role          Role      @default(MEMBER)
  member        Member?
  admin         Admin?
  //image         String?
  @@map("users")
}
//one-to-one relationship
//? means optional
model Member {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  
  // Any additional fields specific to members
}

model Admin {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  
  // Admin-specific fields
  officeNumber      String?
  officeHours       String?
  officeLocation    String?
  creatorCode       String @default("wc_create_admin")
}

enum Role {
  MEMBER
  ADMIN
}

//dont forget npx prisma db push